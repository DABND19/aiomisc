# Translations template for aiomisc.
# Copyright (C) 2021
# This file is distributed under the same license as the aiomisc project.
# Dmitry Orlov <me@mosquito.su>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: aiomisc 16.1.16\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-07-24 13:24+0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/api/aiomisc.rst:2
msgid "``aiomisc`` module"
msgstr "Модуль ``aiomisc``"

#: ../../source/api/aiomisc.rst:5
msgid "``aiomisc.aggregate`` module"
msgstr "Модуль ``aiomisc.aggregate``"

#: aiomisc.aggregate.Arg:1 of
msgid "Create new instance of Arg(value, future)"
msgstr ""

#: ../../docstring aiomisc.aggregate.Arg.future:1
#: aiomisc.counters.StatisticResult.name:1
#: aiomisc.thread_pool.WorkItemBase.args:1 of
msgid "Alias for field number 1"
msgstr ""

#: ../../docstring aiomisc.aggregate.Arg.value:1
#: aiomisc.counters.StatisticResult.kind:1
#: aiomisc.thread_pool.WorkItemBase.func:1 of
msgid "Alias for field number 0"
msgstr ""

#: aiomisc.aggregate.aggregate:1 of
msgid ""
"Parametric decorator that aggregates multiple (but no more than "
"``max_count`` defaulting to ``None``) single-argument executions (``res1 "
"= await func(arg1)``, ``res2 = await func(arg2)``, ...) of an "
"asynchronous function with variadic positional arguments (``async def "
"func(*args, pho=1, bo=2) -> Iterable``) into its single execution with "
"multiple positional arguments (``res1, res2, ... = await func(arg1, arg2,"
" ...)``) collected within a time window ``leeway_ms``."
msgstr ""

#: aiomisc.aggregate.aggregate:12 of
msgid ""
"``func`` must return a sequence of values of length equal to the number "
"of arguments (and in the same order)."
msgstr ""

#: aiomisc.aggregate.aggregate:17 of
msgid ""
"if some unexpected error occurs, exception is propagated to each future; "
"to set an individual error for each aggregated call refer to "
"``aggregate_async``."
msgstr ""

#: aiomisc.aggregate.aggregate aiomisc.backoff.asyncbackoff
#: aiomisc.backoff.asyncretry aiomisc.circuit_breaker.CircuitBreaker
#: aiomisc.entrypoint.Entrypoint aiomisc.utils.SelectAwaitable
#: aiomisc.utils.bind_socket aiomisc.utils.cancel_tasks
#: aiomisc.utils.create_default_event_loop of
msgid "Parameters"
msgstr ""

#: aiomisc.aggregate.aggregate:21 of
msgid ""
"The maximum approximate delay between the first collected argument and "
"the aggregated execution."
msgstr ""

#: aiomisc.aggregate.aggregate:23 of
msgid ""
"The maximum number of arguments to call decorated function with. Default "
"``None``."
msgstr ""

#: aiomisc.aggregate.aggregate aiomisc.aggregate.aggregate_async
#: aiomisc.utils.bind_socket of
msgid "Returns"
msgstr ""

#: aiomisc.aggregate.aggregate_async:1 of
msgid ""
"Same as ``aggregate``, but with ``func`` arguments of type ``Arg`` "
"containing ``value`` and ``future`` attributes instead. In this setting "
"``func`` is responsible for setting individual results/exceptions for all"
" of the futures or throwing an exception (it will propagate to futures "
"automatically). If ``func`` mistakenly does not set a result of some "
"future, then, ``ResultNotSetError`` exception is set."
msgstr ""

#: ../../source/api/aiomisc.rst:12
msgid "``aiomisc.backoff`` module"
msgstr "Модуль ``aiomisc.backoff``"

#: aiomisc.backoff.asyncbackoff:1 of
msgid ""
"Patametric decorator that ensures that ``attempt_timeout`` and "
"``deadline`` time limits are met by decorated function."
msgstr ""

#: aiomisc.backoff.asyncbackoff:4 aiomisc.backoff.asyncretry:3 of
msgid ""
"In case of exception function will be called again with similar arguments"
" after ``pause`` seconds."
msgstr ""

#: aiomisc.backoff.asyncbackoff:7 aiomisc.backoff.asyncretry:11 of
msgid "name filed for statistic instances"
msgstr ""

#: aiomisc.backoff.asyncbackoff:8 of
msgid "is maximum execution time for one execution attempt."
msgstr ""

#: aiomisc.backoff.asyncbackoff:10 of
msgid "is maximum execution time for all execution attempts."
msgstr ""

#: aiomisc.backoff.asyncbackoff:11 aiomisc.backoff.asyncretry:10 of
msgid "is time gap between execution attempts."
msgstr ""

#: aiomisc.backoff.asyncbackoff:12 of
msgid "retrying when this exceptions was raised."
msgstr ""

#: aiomisc.backoff.asyncbackoff:13 aiomisc.backoff.asyncretry:8 of
msgid "similar as exc but keyword only."
msgstr ""

#: aiomisc.backoff.asyncbackoff:14 of
msgid "is maximum count of execution attempts (>= 1)."
msgstr ""

#: aiomisc.backoff.asyncbackoff:15 aiomisc.backoff.asyncretry:9 of
msgid "is a predicate function which can decide by a given"
msgstr ""

#: aiomisc.backoff.asyncbackoff:16 of
msgid "statistic class"
msgstr ""

#: aiomisc.backoff.asyncretry:1 of
msgid "Shortcut of ``asyncbackoff(None, None, 0, Exception)``."
msgstr ""

#: aiomisc.backoff.asyncretry:6 of
msgid "is maximum count of execution attempts (>= 1 or ``None`` means infinity)."
msgstr ""

#: ../../source/api/aiomisc.rst:19
msgid "``aiomisc.circuit_breaker`` module"
msgstr "Модуль ``aiomisc.circuit_breaker``"

#: aiomisc.circuit_breaker.CircuitBreaker:1 of
msgid ""
"Circuit Breaker pattern implementation. The class instance collects call "
"statistics through the ``call`` or ``call async`` methods."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:4 of
msgid ""
"The state machine has three states: * ``CircuitBreakerStates.PASSING`` * "
"``CircuitBreakerStates.BROKEN`` * ``CircuitBreakerStates.RECOVERING``"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:9 of
msgid ""
"In passing mode all results or exceptions will be returned as is. "
"Statistic collects for each call."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:12 of
msgid ""
"In broken mode returns exception ``CircuitBroken`` for each call. "
"Statistic doesn't collecting."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:15 of
msgid ""
"In recovering mode the part of calls is real function calls and "
"remainings raises ``CircuitBroken``. The count of real calls grows "
"exponentially in this case but when 20% (by default) will be failed the "
"state returns to broken state."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:20 of
msgid ""
"Failed to success calls ratio. The state might be changed if ratio will "
"reach given value within ``response time`` (in seconds). Value between "
"0.0 and 1.0."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:24 of
msgid "Time window to collect statistics (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:25 of
msgid ""
"Only this exceptions will affect ratio. Base class  ``Exception`` used by"
" default."
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:27 of
msgid "minimal time in recovery state (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:28 of
msgid "minimal time in broken state (seconds)"
msgstr ""

#: aiomisc.circuit_breaker.CircuitBreaker:29 of
msgid "minimum time in passing state (seconds)"
msgstr ""

#: ../../source/api/aiomisc.rst:26
msgid "``aiomisc.compat`` module"
msgstr "Модуль ``aiomisc.compat``"

#: of typing.ParamSpec:1
msgid "Parameter specification variable."
msgstr ""

#: of typing.ParamSpec:3
msgid "Usage::"
msgstr ""

#: of typing.ParamSpec:5
msgid "P = ParamSpec('P')"
msgstr ""

#: of typing.ParamSpec:7
msgid ""
"Parameter specification variables exist primarily for the benefit of "
"static type checkers.  They are used to forward the parameter types of "
"one callable to another callable, a pattern commonly found in higher "
"order functions and decorators.  They are only valid when used in "
"``Concatenate``, or as the first argument to ``Callable``, or as "
"parameters for user-defined Generics.  See class Generic for more "
"information on generic types.  An example for annotating a decorator::"
msgstr ""

#: of typing.ParamSpec:15
msgid ""
"T = TypeVar('T')\n"
"P = ParamSpec('P')\n"
"\n"
"def add_logging(f: Callable[P, T]) -> Callable[P, T]:\n"
"    '''A type-safe decorator to add logging to a function.'''\n"
"    def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n"
"        logging.info(f'{f.__name__} was called')\n"
"        return f(*args, **kwargs)\n"
"    return inner\n"
"\n"
"@add_logging\n"
"def add_two(x: float, y: float) -> float:\n"
"    '''Add two numbers together.'''\n"
"    return x + y"
msgstr ""

#: of typing.ParamSpec:30
msgid ""
"Parameter specification variables defined with covariant=True or "
"contravariant=True can be used to declare covariant or contravariant "
"generic types.  These keyword arguments are valid, but their actual "
"semantics are yet to be decided.  See PEP 612 for details."
msgstr ""

#: of typing.ParamSpec:35
msgid "Parameter specification variables can be introspected. e.g.:"
msgstr ""

#: of typing.ParamSpec:37
msgid ""
"P.__name__ == 'P' P.__bound__ == None P.__covariant__ == False "
"P.__contravariant__ == False"
msgstr ""

#: of typing.ParamSpec:42
msgid ""
"Note that only parameter specification variables defined in global scope "
"can be pickled."
msgstr ""

#: of typing.Protocol:1
msgid "Base class for protocol classes."
msgstr ""

#: of typing.Protocol:3
msgid "Protocol classes are defined as::"
msgstr ""

#: of typing.Protocol:5
msgid ""
"class Proto(Protocol):\n"
"    def meth(self) -> int:\n"
"        ..."
msgstr ""

#: of typing.Protocol:9
msgid ""
"Such classes are primarily used with static type checkers that recognize "
"structural subtyping (static duck-typing), for example::"
msgstr ""

#: of typing.Protocol:12
msgid ""
"class C:\n"
"    def meth(self) -> int:\n"
"        return 0\n"
"\n"
"def func(x: Proto) -> int:\n"
"    return x.meth()\n"
"\n"
"func(C())  # Passes static type check"
msgstr ""

#: of typing.Protocol:21
msgid ""
"See PEP 544 for details. Protocol classes decorated with "
"@typing.runtime_checkable act as simple-minded runtime protocols that "
"check only the presence of given attributes, ignoring their type "
"signatures. Protocol classes can be generic, they are defined as::"
msgstr ""

#: of typing.Protocol:26
msgid ""
"class GenProto(Protocol[T]):\n"
"    def meth(self) -> T:\n"
"        ..."
msgstr ""

#: of typing.final:1
msgid "A decorator to indicate final methods and final classes."
msgstr ""

#: of typing.final:3
msgid ""
"Use this decorator to indicate to type checkers that the decorated method"
" cannot be overridden, and decorated class cannot be subclassed. For "
"example:"
msgstr ""

#: of typing.final:9
msgid "class Base:"
msgstr ""

#: of typing.final:8
msgid "@final def done(self) -> None:"
msgstr ""

#: of typing.final:10 typing.final:13 typing.final:17 typing.final:19
msgid "..."
msgstr ""

#: of typing.final:13
msgid "class Sub(Base):"
msgstr ""

#: of typing.final:13
msgid "def done(self) -> None:  # Error reported by type checker"
msgstr ""

#: of typing.final:15
msgid "@final class Leaf:"
msgstr ""

#: of typing.final:19
msgid "class Other(Leaf):  # Error reported by type checker"
msgstr ""

#: of typing.final:21
msgid ""
"There is no runtime checking of these properties. The decorator sets the "
"``__final__`` attribute to ``True`` on the decorated object to allow "
"runtime introspection."
msgstr ""

#: of time.time_ns:1
msgid "Return the current time in nanoseconds since the Epoch."
msgstr ""

#: ../../source/api/aiomisc.rst:33
msgid "``aiomisc.context`` module"
msgstr "Модуль ``aiomisc.context``"

#: ../../source/api/aiomisc.rst:40
msgid "``aiomisc.counters`` module"
msgstr "Модуль ``aiomisc.counters``"

#: aiomisc.counters.StatisticResult:1 of
msgid "Create new instance of StatisticResult(kind, name, metric, value)"
msgstr ""

#: ../../docstring aiomisc.counters.StatisticResult.metric:1
#: aiomisc.thread_pool.WorkItemBase.kwargs:1 of
msgid "Alias for field number 2"
msgstr ""

#: ../../docstring aiomisc.counters.StatisticResult.value:1
#: aiomisc.thread_pool.WorkItemBase.future:1 of
msgid "Alias for field number 3"
msgstr ""

#: ../../source/api/aiomisc.rst:47
msgid "``aiomisc.cron`` module"
msgstr "Модуль ``aiomisc.cron``"

#: aiomisc.cron.CronCallback:3 of
msgid ""
"When the cron function executes longer then execution interval a next "
"call will be skipping and warning will be logged."
msgstr ""

#: ../../source/api/aiomisc.rst:54
msgid "``aiomisc.entrypoint`` module"
msgstr "Модуль ``aiomisc.entrypoint``"

#: aiomisc.entrypoint.Entrypoint:1 of
msgid "Creates a new Entrypoint"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:3 of
msgid "set debug to event-loop"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:4 of
msgid "loop"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:5 of
msgid "Service instances which will be starting."
msgstr ""

#: aiomisc.entrypoint.Entrypoint:6 of
msgid "thread pool size"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:7 of
msgid "Logging level which will be configured"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:8 of
msgid "Logging format which will be configured"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:9 of
msgid "Buffer size for logging"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:10 of
msgid "interval in seconds for flushing logs"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:11 of
msgid "if False do not configure logging"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:12 of
msgid "Perform shutdown when this signals will be received"
msgstr ""

#: aiomisc.entrypoint.Entrypoint:14 of
msgid "Timeout in seconds for graceful shutdown"
msgstr ""

#: ../../source/api/aiomisc.rst:61
msgid "``aiomisc.io`` module"
msgstr "Модуль ``aiomisc.io``"

#: ../../source/api/aiomisc.rst:68
msgid "``aiomisc.iterator_wrapper`` module"
msgstr "Модуль ``aiomisc.iterator_wrapper``"

#: ../../source/api/aiomisc.rst:75
msgid "``aiomisc.log`` module"
msgstr "Модуль ``aiomisc.log``"

#: ../../source/api/aiomisc.rst:82
msgid "``aiomisc.periodic`` module"
msgstr "Модуль ``aiomisc.periodic``"

#: aiomisc.periodic.PeriodicCallback:3 of
msgid ""
"When the periodic function executes longer then execution interval a next"
" call would be skipped and warning would be logged."
msgstr ""

#: ../../source/api/aiomisc.rst:89
msgid "``aiomisc.plugins`` module"
msgstr "Модуль ``aiomisc.plugins``"

#: ../../source/api/aiomisc.rst:96
msgid "``aiomisc.pool`` module"
msgstr "Модуль ``aiomisc.pool``"

#: ../../source/api/aiomisc.rst:103
msgid "``aiomisc.process_pool`` module"
msgstr "Модуль ``aiomisc.process_pool``"

#: aiomisc.process_pool.ProcessPoolExecutor:1 of
msgid "Initializes a new ProcessPoolExecutor instance."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:18
#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "Args:"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:5 of
msgid "max_workers: The maximum number of processes that can be used to"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:5 of
msgid ""
"execute the given calls. If None or not given then as many worker "
"processes will be created as the machine has processors."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:8 of
msgid "mp_context: A multiprocessing context to launch the workers. This"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:8 of
msgid ""
"object should provide SimpleQueue, Queue and Process. Useful to allow "
"specific multiprocessing start methods."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:10 of
msgid ""
"initializer: A callable used to initialize worker processes. initargs: A "
"tuple of arguments to pass to the initializer. max_tasks_per_child: The "
"maximum number of tasks a worker process"
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor:13 of
msgid ""
"can complete before it will exit and be replaced with a fresh worker "
"process. The default of None means worker process will live as long as "
"the executor. Requires a non-'fork' mp_context start method. When given, "
"we default to using 'spawn' if no mp_context is supplied."
msgstr ""

#: aiomisc.process_pool.ProcessPoolExecutor.submit:1
#: aiomisc.thread_pool.ThreadPoolExecutor.submit:1 of
msgid "Submit blocking function to the pool"
msgstr ""

#: ../../source/api/aiomisc.rst:110
msgid "``aiomisc.recurring`` module"
msgstr "Модуль ``aiomisc.recurring``"

#: aiomisc.recurring.StrategySkip:1 of
msgid "Strategy function might raise this exception as way to skip current call"
msgstr ""

#: aiomisc.recurring.StrategyStop:1 of
msgid "Strategy function might raise this exception as way to  stop recurring"
msgstr ""

#: ../../source/api/aiomisc.rst:117
msgid "``aiomisc.signal`` module"
msgstr "Модуль ``aiomisc.signal``"

#: ../../source/api/aiomisc.rst:124
msgid "``aiomisc.thread_pool`` module"
msgstr "Модуль ``aiomisc.thread_pool``"

#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:1 of
msgid "Clean-up the resources associated with the Executor."
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:3 of
msgid ""
"It is safe to call this method several times. Otherwise, no other methods"
" can be called after this one."
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid "wait: If True then shutdown will not return until all running"
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:8 of
msgid ""
"futures have finished executing and the resources used by the executor "
"have been reclaimed."
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "cancel_futures: If True then shutdown will cancel all pending"
msgstr ""

#: aiomisc.thread_pool.ThreadPoolExecutor.shutdown:11 of
msgid "futures. Futures that are completed or running will not be cancelled."
msgstr ""

#: aiomisc.thread_pool.WorkItem:1 aiomisc.thread_pool.WorkItemBase:1 of
msgid "Create new instance of WorkItemBase(func, args, kwargs, future, loop)"
msgstr ""

#: ../../docstring aiomisc.thread_pool.WorkItemBase.loop:1 of
msgid "Alias for field number 4"
msgstr ""

#: ../../source/api/aiomisc.rst:131
msgid "``aiomisc.timeout`` module"
msgstr "Модуль ``aiomisc.timeout``"

#: ../../source/api/aiomisc.rst:138
msgid "``aiomisc.utils`` module"
msgstr "Модуль ``aiomisc.utils``"

#: aiomisc.utils.SelectAwaitable:1 of
msgid "Select one of passed awaitables"
msgstr ""

#: aiomisc.utils.SelectAwaitable:3 of
msgid "awaitable objects"
msgstr ""

#: aiomisc.utils.SelectAwaitable:4 of
msgid "if True exception will not be raised just returned as result"
msgstr ""

#: aiomisc.utils.SelectAwaitable:6 of
msgid "cancel unfinished coroutines (default True)"
msgstr ""

#: aiomisc.utils.SelectAwaitable:7 of
msgid "execution timeout"
msgstr ""

#: aiomisc.utils.SelectAwaitable:8 of
msgid ""
"when False and ``cancel=True``, unfinished coroutines will be cancelled "
"in the background."
msgstr ""

#: aiomisc.utils.SelectAwaitable:10 of
msgid "event loop"
msgstr ""

#: aiomisc.utils.awaitable:1 of
msgid ""
"Decorator wraps function and returns a function which returns awaitable "
"object. In case than a function returns a future, the original future "
"will be returned. In case then the function returns a coroutine, the "
"original coroutine will be returned. In case than function returns non-"
"awaitable object, it will be wrapped to a new coroutine which just "
"returns this object. It's useful when you don't want to check function "
"result before use it in ``await`` expression."
msgstr ""

#: aiomisc.utils.bind_socket:1 of
msgid ""
"Bind socket and set ``setblocking(False)`` for just created socket. This "
"detects ``address`` format and select socket family automatically."
msgstr ""

#: aiomisc.utils.bind_socket:4 of
msgid "which will be passed to stdlib's socket constructor (optional)"
msgstr ""

#: aiomisc.utils.bind_socket:5 of
msgid "bind address"
msgstr ""

#: aiomisc.utils.bind_socket:6 of
msgid "bind port"
msgstr ""

#: aiomisc.utils.bind_socket:7 of
msgid "Tuple of pairs which contain socket option to set and the option value."
msgstr ""

#: aiomisc.utils.bind_socket:9 of
msgid "set socket.SO_REUSEADDR"
msgstr ""

#: aiomisc.utils.bind_socket:10 of
msgid "set socket.SO_REUSEPORT"
msgstr ""

#: aiomisc.utils.bind_socket:11 of
msgid "protocol name which will be logged after binding"
msgstr ""

#: aiomisc.utils.bind_socket:12 of
msgid "socket.socket"
msgstr ""

#: aiomisc.utils.cancel_tasks:1 of
msgid "All passed tasks will be cancelled and a new task will be returned."
msgstr ""

#: aiomisc.utils.cancel_tasks:3 of
msgid "tasks which will be cancelled"
msgstr ""

#: aiomisc.utils.chunk_list:1 of
msgid "Split list or generator by chunks with fixed maximum size."
msgstr ""

#: aiomisc.utils.create_default_event_loop:1 of
msgid "Creates an event loop and thread pool executor"
msgstr ""

#: aiomisc.utils.create_default_event_loop:3 of
msgid "thread pool maximal size"
msgstr ""

#: aiomisc.utils.create_default_event_loop:4 of
msgid "event loop policy"
msgstr ""

#: aiomisc.utils.create_default_event_loop:5 of
msgid "set ``loop.set_debug(True)`` if True"
msgstr ""

#: aiomisc.utils.fast_uuid1:1 of
msgid "Fast UUID1 like identifier"
msgstr ""

#: aiomisc.utils.fast_uuid4:1 of
msgid "Fast UUID4 like identifier"
msgstr ""

#: aiomisc.utils.shield:1 of
msgid "Simple and useful decorator for wrap the coroutine to `asyncio.shield`."
msgstr ""

#: ../../source/api/aiomisc.rst:145
msgid "``aiomisc.worker_pool`` module"
msgstr "Модуль ``aiomisc.worker_pool``"

#~ msgid "A decorator to indicate final methods and final classes."
#~ msgstr ""

#~ msgid ""
#~ "Use this decorator to indicate to "
#~ "type checkers that the decorated method"
#~ " cannot be overridden, and decorated "
#~ "class cannot be subclassed. For example:"
#~ msgstr ""

#~ msgid "cancel_futures: If True then shutdown will cancel all pending"
#~ msgstr ""

#~ msgid "futures. Futures that are completed or running will not be cancelled."
#~ msgstr ""

#~ msgid "An enumeration."
#~ msgstr ""

#~ msgid ""
#~ "This decorator can be used to "
#~ "indicate to type checkers that the "
#~ "decorated method cannot be overridden, "
#~ "and decorated class cannot be "
#~ "subclassed. For example:"
#~ msgstr ""

#~ msgid ""
#~ "Decorator wraps function and returns a"
#~ " function which returns awaitable object."
#~ " In case than a function returns "
#~ "a future, the original future will "
#~ "be returned. In case then the "
#~ "function returns a coroutine, the "
#~ "original coroutine will be returned. In"
#~ " case than function returns non-"
#~ "awaitable object, it's will be wrapped"
#~ " to a new coroutine which just "
#~ "returns this object. It's useful when"
#~ " you don't want to check function "
#~ "result before use it in ``await`` "
#~ "expression."
#~ msgstr ""
